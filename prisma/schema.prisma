// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id          String     @id @default(cuid())
  title       String
  author      String
  category    BookCategory
  content     String
  coverImage  String?
  status      BookStatus @default(DRAFT)
  metadata    String?    // JSON string for additional book metadata
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapters    Chapter[]  // For custom books
  photos      Photo[]    // For photo books
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Chapter {
  id        String   @id @default(cuid())
  title     String
  prompt    String
  content   String
  order     Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([bookId, order])
}

model Photo {
  id        String   @id @default(cuid())
  filename  String
  caption   String
  order     Int
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([bookId, order])
}

enum BookCategory {
  CHILDRENS_STORY
  RECIPE_COOKBOOK
  ADVENTURE
  FUNNY_QUOTES
  GENERAL_PROMPT
  CUSTOM_BOOK
  PHOTO_BOOK
}

enum BookStatus {
  DRAFT
  GENERATING
  COMPLETED
  ERROR
}